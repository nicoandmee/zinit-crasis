# This file is double-licensed under GPLv3 and MIT (see LICENSE file)

# Input:
# $1 - text to process
#
# Output:
# ZCR_PB_WORDS - split of "$1" into shell words; array
# ZCR_PB_WORDS_BEGINNINGS - indexes of first letters of corresponding words in ZCR_PB_WORDS
# ZCR_PB_SPACES - white spaces before corresponding words in ZCR_PB_WORDS
# ZCR_PB_ALL - spaces and words, together
#

emulate -LR zsh
setopt typesetsilent extendedglob noshortloops

local -a mbegin mend match
local MATCH; integer MBEGIN MEND

local buf="$1"
local len="${#buf}"

# All output variables are either overwritten or cleared
ZCR_PB_WORDS=( "${(Z+cn+)buf}" )
ZCR_PB_SPACES=()
ZCR_PB_WORDS_BEGINNINGS=()
ZCR_PB_ALL=()

# (Z+n+) will return 1 element for buf that is empty or only whitespace
if [[ "$buf" = ( |$'\t')# ]]; then
    ZCR_PB_WORDS=()
    integer nwords=0
else
    integer nwords="${#ZCR_PB_WORDS}"
fi

# Remove ZCR_PB_WORDS one by one, counting characters,
# computing beginning of each word, to find
# place to break the word into 2 halves (for
# complete_in_word option)

local i word wordlen
integer char_count=0

for (( i=1; i<=nwords; i++ )); do
    # Remove spurious space generated by Z-flag when
    # input is an unbound '$(' (happens with zsh < 5.1)
    # and also real spaces gathered by an unbound '$(',
    # to handle them in a way normal to this loop
    ZCR_PB_WORDS[i]="${ZCR_PB_WORDS[i]%% ##}"
    word="${ZCR_PB_WORDS[i]}"
    wordlen="${#word}"

    # In general, $buf can start with white spaces
    # We will not search for them, but instead for
    # leading character of current shell word,
    # negated. This is an ambition to completely
    # avoid character classes

    # Remove white spaces
    buf="${buf##(#m)[^$word[1]]#}"
    # Count them
    char_count=char_count+"${#MATCH}"
    # This is the beginning of current word
    ZCR_PB_WORDS_BEGINNINGS[i]=$(( char_count + 1 ))
    # Remember the spaces
    ZCR_PB_SPACES[i]="$MATCH"

    # Store full data
    ZCR_PB_ALL+=( "$MATCH" "$word" )

    # Remove the word
    buf="${buf[wordlen+1,len]}"
done 

# What's left in $buf can be only white spaces
ZCR_PB_SPACES[i]="$buf"
ZCR_PB_ALL+=( "$buf" )

return 0

# vim:ft=zsh
